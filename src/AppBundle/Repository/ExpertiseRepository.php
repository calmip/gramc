<?php

/**
 * This file is part of GRAMC (Computing Ressource Granting Software)
 * GRAMC stands for : Gestion des Ressources et de leurs Attributions pour Mésocentre de Calcul
 *
 * GRAMC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 *  GRAMC is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with GRAMC.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
 *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
 *            Nicolas Renon - Université Paul Sabatier - CALMIP
 **/

namespace AppBundle\Repository;
use AppBundle\Utils\Etat;

use AppBundle\Entity\Session;
use AppBundle\Entity\Thematique;
use AppBundle\Entity\Individu;
use AppBundle\Entity\Version;

/**
 * ExpertiseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExpertiseRepository extends \Doctrine\ORM\EntityRepository
{
public function countExpertises($expert)
    {
    return $this->getEntityManager()
         ->createQuery
        ('SELECT count(e) FROM AppBundle:Expertise e JOIN AppBundle:Version v WHERE ( v.etatVersion = :edition_expertise  AND e.version = v AND e.expert = :expert )')
        ->setParameter('edition_expertise', Etat::getEtat('EDITION_EXPERTISE') )
        ->setParameter('expert', $expert )
        ->getSingleScalarResult();
    }


public function findExpertisesByThematique(Thematique $thematique, Session $session)
{
    //$dql  =   'SELECT e FROM AppBundle:Expertise e';
    //$dql .=  " INNER JOIN AppBundle:Version v WITH e.version = v ";
    //$dql .=  " WHERE ( v.session = :session AND v.prjThematique = :thematique )";
    //$dql .=  " GROUP BY v.prjThematique";

	$dql  = 'SELECT e FROM AppBundle:Expertise e, AppBundle:Version v';
	$dql .= ' WHERE ( v.session = :session AND v.prjThematique = :thematique )';
    return $this->getEntityManager()
         ->createQuery( $dql )
         ->setParameter('session', $session )
         ->setParameter('thematique', $thematique )
         ->getResult();
}

public function findExpertisesByThematiqueForAllSessions(Thematique $thematique)
{
    $dql     =   'SELECT e FROM AppBundle:Expertise e';
    $dql    .=  " INNER JOIN AppBundle:Version v WITH e.version = v ";
    $dql    .=  " WHERE ( v.prjThematique = :thematique ) ";

    return $this->getEntityManager()
         ->createQuery( $dql )
         ->setParameter('thematique', $thematique )
         ->getResult();
}

// 14-10-2020 -> Ne garde que les expertises pour lesquelles definitif vaut 0
public function findExpertisesByExpert(Individu $expert, Session $session)
{
    $dql     =   'SELECT e FROM AppBundle:Expertise e';
    $dql    .=  " INNER JOIN AppBundle:Version v WITH e.version = v ";
    $dql    .=  " WHERE ( v.session = :session AND e.expert = :expert AND e.definitif = 0 ) ";

    return $this->getEntityManager()
         ->createQuery( $dql )
         ->setParameter('session', $session )
         ->setParameter('expert', $expert )
         ->getResult();
}

public function findExpertisesByExpertForAllSessions(Individu $expert)
{
    $dql     =   'SELECT e FROM AppBundle:Expertise e';
    $dql    .=  " INNER JOIN AppBundle:Version v WITH e.version = v ";
    $dql    .=  " WHERE ( e.expert = :expert ) ";

    return $this->getEntityManager()
         ->createQuery( $dql )
         ->setParameter('expert', $expert )
         ->getResult();
}

// Renvoie toutes les expertises sur une version donnée, SAUF celle de $expert
public function findExpertisesForVersion(Version $version,$expert)
{
	$dql     =   'SELECT e FROM AppBundle:Expertise e WHERE e.version = :version AND e.expert != :expert ORDER BY e.id';

    return $this->getEntityManager()
         ->createQuery( $dql )
         ->setParameter('version', $version )
         ->setParameter('expert', $expert )
         ->getResult();
}


}
